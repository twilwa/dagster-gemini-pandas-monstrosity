{"version":3,"file":"static/chunks/111.854609fe32d3f52e.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationTick.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationUtils.tsx","webpack://_N_E/../ui-core/src/instigation/TickDetailsDialog.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Body,\n  Box,\n  Colors,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n} from '@dagster-io/ui-components';\n\nimport {LaunchedRunListQuery, LaunchedRunListQueryVariables} from './types/InstigationTick.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RUN_TABLE_RUN_FRAGMENT, RunTable} from '../runs/RunTable';\n\nexport const RunList = ({runIds}: {runIds: string[]}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList = ({originRunIds}: {originRunIds?: string[]}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', color: Colors.textLighter()}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nexport const InstigatedRunStatus = ({\n  instigationState,\n}: {\n  instigationState: InstigationStateFragment;\n}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: Colors.textLight()}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink = ({run}: {run: RunStatusFragment}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.textLight()};\n  }\n`;\n\nexport const DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT = gql`\n  fragment DynamicPartitionsRequestResultFragment on DynamicPartitionsRequestResult {\n    partitionsDefName\n    partitionKeys\n    skippedPartitionKeys\n    type\n  }\n`;\n\nexport const HISTORY_TICK_FRAGMENT = gql`\n  fragment HistoryTick on InstigationTick {\n    id\n    tickId\n    status\n    timestamp\n    endTimestamp\n    cursor\n    instigationType\n    skipReason\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n    dynamicPartitionsRequestResults {\n      ...DynamicPartitionsRequestResultFragment\n    }\n  }\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogFooter,\n  DialogHeader,\n  MiddleTruncate,\n  Spinner,\n  Subtitle2,\n  Tab,\n  Table,\n  Tabs,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {FailedRunList, RunList} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT} from './InstigationUtils';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {QueryfulTickLogsTable} from '../ticks/TickLogDialog';\n\ninterface DialogProps extends InnerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport const TickDetailsDialog = ({tickId, isOpen, instigationSelector, onClose}: DialogProps) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '80vw', maxWidth: '1200px', minWidth: '600px'}}\n    >\n      <TickDetailsDialogImpl tickId={tickId} instigationSelector={instigationSelector} />\n      {/* The logs table uses z-index for the column lines. Create a new stacking index\n      for the footer so that the lines don't sit above it. */}\n      <div style={{zIndex: 1}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Close</Button>\n        </DialogFooter>\n      </div>\n    </Dialog>\n  );\n};\n\ninterface InnerProps {\n  tickId: number | undefined;\n  instigationSelector: InstigationSelector;\n}\n\nconst TickDetailsDialogImpl = ({tickId, instigationSelector}: InnerProps) => {\n  const [activeTab, setActiveTab] = useState<'result' | 'logs'>('result');\n\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, tickId: tickId || 0},\n    skip: !tickId,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  const [addedPartitionRequests, deletedPartitionRequests] = useMemo(() => {\n    const added = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.ADD_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    const deleted = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.DELETE_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  if (!tick) {\n    return (\n      <Box style={{padding: 32}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <DialogHeader\n        label={\n          <TimestampDisplay\n            timestamp={tick.timestamp}\n            timeFormat={{showTimezone: false, showSeconds: true}}\n          />\n        }\n      />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <TickDetailSummary tick={tick} />\n      </Box>\n      <Box padding={{horizontal: 24}} border=\"bottom\">\n        <Tabs selectedTabId={activeTab} onChange={setActiveTab}>\n          <Tab id=\"result\" title=\"Result\" />\n          <Tab id=\"logs\" title=\"Logs\" />\n        </Tabs>\n      </Box>\n      {activeTab === 'result' ? (\n        <div style={{height: '500px', overflowY: 'auto'}}>\n          {tick.runIds.length || tick.originRunIds.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Requested</Subtitle2>\n              </Box>\n              {tick.runIds.length ? (\n                <RunList runIds={tick.runIds} />\n              ) : (\n                <FailedRunList originRunIds={tick.originRunIds} />\n              )}\n            </>\n          ) : null}\n          {addedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Added partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={addedPartitionRequests} />\n            </>\n          ) : null}\n          {deletedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Deleted partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={deletedPartitionRequests} />\n            </>\n          ) : null}\n          {tick.error ? (\n            <Box padding={24}>\n              <PythonErrorInfo error={tick.error} />\n            </Box>\n          ) : null}\n          {tick.skipReason ? (\n            <Box padding={24}>\n              <strong>Skip reason:</strong> {tick.skipReason}\n            </Box>\n          ) : null}\n        </div>\n      ) : null}\n      {activeTab === 'logs' ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tick={tick} />\n      ) : null}\n    </>\n  );\n};\n\nexport function TickDetailSummary({tick}: {tick: HistoryTickFragment | AssetDaemonTickFragment}) {\n  const intent = useMemo(() => {\n    switch (tick?.status) {\n      case InstigationTickStatus.FAILURE:\n        return 'danger';\n      case InstigationTickStatus.STARTED:\n        return 'primary';\n      case InstigationTickStatus.SUCCESS:\n        return 'success';\n    }\n    return undefined;\n  }, [tick]);\n\n  const isAssetDaemonTick = 'requestedAssetMaterializationCount' in tick;\n\n  return (\n    <>\n      <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, minmax(0, 1fr))', gap: 12}}>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Status</Subtitle2>\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Tag intent={intent}>\n              {tick.status === InstigationTickStatus.STARTED ? (\n                'Evaluating…'\n              ) : (\n                <>\n                  {(isAssetDaemonTick\n                    ? tick.requestedAssetMaterializationCount\n                    : tick.runIds.length) ?? 0}{' '}\n                  requested\n                </>\n              )}\n            </Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  showCustomAlert({\n                    title: 'Tick error',\n                    body: <PythonErrorInfo error={tick.error!} />,\n                  });\n                }}\n              >\n                View error\n              </ButtonLink>\n            ) : null}\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Timestamp</Subtitle2>\n          <div>\n            {tick ? (\n              <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n            ) : (\n              '–'\n            )}\n          </div>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Duration</Subtitle2>\n          <div>\n            {tick?.endTimestamp\n              ? formatElapsedTimeWithoutMsec(tick.endTimestamp * 1000 - tick.timestamp * 1000)\n              : '\\u2013'}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n}\n\nfunction PartitionsTable({partitions}: {partitions: DynamicPartitionsRequestResult[]}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Partition definition</th>\n          <th>Partition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {partitions.flatMap(\n          (partition) =>\n            partition.partitionKeys?.map((key) => (\n              <tr key={key}>\n                <td>\n                  <MiddleTruncate text={partition.partitionsDefName} />\n                </td>\n                <td>\n                  <MiddleTruncate text={key} />\n                </td>\n              </tr>\n            )),\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $tickId: Int!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        tick(tickId: $tickId) {\n          id\n          ...HistoryTick\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {\n  TickLogEventFragment,\n  TickLogEventsQuery,\n  TickLogEventsQueryVariables,\n} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\nimport {EventTypeColumn, Row, TimestampColumn} from '../runs/LogsRowComponents';\nimport {\n  ColumnWidthsContext,\n  ColumnWidthsProvider,\n  Header,\n  HeaderContainer,\n  HeadersContainer,\n} from '../runs/LogsScrollingTableHeader';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tick,\n  instigationSelector,\n  onClose,\n}: {\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}) => {\n  const {data} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(TICK_LOG_EVENTS_QUERY, {\n    variables: {instigationSelector, tickId: Number(tick.tickId)},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!events}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      <DialogBody>\n        {events && events.length ? (\n          <TickLogsTable events={events} />\n        ) : (\n          <Box\n            flex={{justifyContent: 'center', alignItems: 'center'}}\n            style={{flex: 1, color: Colors.textLight()}}\n          >\n            No logs available\n          </Box>\n        )}\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tick}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId: Number(tick.tickId)},\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (events && events.length) {\n    return <TickLogsTable events={events} />;\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n      : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      {loading ? (\n        'Loading logs…'\n      ) : (\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No logs to display\"\n          description={\n            <Box flex={{direction: 'column', gap: 12}}>\n              <div>\n                Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n                visit the documentation for more information.\n              </div>\n              {tickStatus === 'FAILURE' && (\n                <>\n                  <div>\n                    For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                    Cloud agent versions 1.5.14 or higher.\n                  </div>\n                  <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n                </>\n              )}\n            </Box>\n          }\n          action={\n            instigationLoggingDocsUrl && (\n              <ExternalAnchorButton\n                href={instigationLoggingDocsUrl}\n                rightIcon={<Icon name=\"open_in_new\" />}\n              >\n                View documentation\n              </ExternalAnchorButton>\n            )\n          }\n        />\n      )}\n    </Box>\n  );\n};\n\nconst TickLogsTable = ({events}: {events: TickLogEventFragment[]}) => {\n  return (\n    <ColumnWidthsProvider onWidthsChanged={() => {}}>\n      <div style={{height: 500, position: 'relative', zIndex: 0}}>\n        <Headers />\n        <div style={{height: 468, overflowY: 'auto'}}>\n          {events.map((event, idx) => (\n            <TickLogRow event={event} key={idx} />\n          ))}\n        </div>\n      </div>\n    </ColumnWidthsProvider>\n  );\n};\n\nconst Headers = () => {\n  const widths = useContext(ColumnWidthsContext);\n  return (\n    <HeadersContainer>\n      <Header\n        width={widths.eventType}\n        onResize={(width) => widths.onChange({...widths, eventType: width})}\n      >\n        Event Type\n      </Header>\n      <HeaderContainer style={{flex: 1}}>Info</HeaderContainer>\n      <Header\n        handleSide=\"left\"\n        width={widths.timestamp}\n        onResize={(width) => widths.onChange({...widths, timestamp: width})}\n      >\n        Timestamp\n      </Header>\n    </HeadersContainer>\n  );\n};\n\nconst TickLogRow = ({event}: {event: TickLogEventFragment}) => {\n  return (\n    <Row level={event.level} highlighted={false} style={{height: 'auto'}}>\n      <EventTypeColumn>\n        <span style={{marginLeft: 8}}>{event.level}</span>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {event.message}\n      </Box>\n      <TimestampColumn time={event.timestamp} />\n    </Row>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: Int!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...TickLogEvent\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment TickLogEvent on InstigationEvent {\n    message\n    timestamp\n    level\n  }\n`;\n"],"names":["LastRunSummary","memo","param","tagElement","name","run","showHover","_param_showButton","showButton","_param_showSummary","showSummary","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","jsx","Tag","RunStatusIndicator","size","RunTime","_param_showHover","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","concat","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Caption","color","Colors","Link","stepKey","gql","useCanSeeConfig","INSTANCE_CONFIG_HAS_INFO","instance","hasInfo","RunList","runIds","LAUNCHED_RUN_LIST_QUERY","loading","padding","Spinner","purpose","pipelineRunsOrError","NonIdealState","icon","title","description","message","bottom","RunTable","runs","results","FailedRunList","originRunIds","Group","spacing","border","side","Body","Tooltip","Icon","margin","TICK_TAG_FRAGMENT","PYTHON_ERROR_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","RunStatusLink","target","rel","Mono","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","styled","table","withConfig","DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT","HISTORY_TICK_FRAGMENT","TickDetailsDialog","tickId","isOpen","instigationSelector","onClose","Dialog","style","width","maxWidth","minWidth","TickDetailsDialogImpl","zIndex","DialogFooter","topBorder","Button","onClick","useState","activeTab","setActiveTab","JOB_SELECTED_TICK_QUERY","skip","tick","instigationStateOrError","dynamicPartitionsRequestResults","request","type","DynamicPartitionsRequestType","ADD_PARTITIONS","partitionKeys","DELETE_PARTITIONS","addedPartitionRequests","deletedPartitionRequests","Fragment","DialogHeader","label","TimestampDisplay","timestamp","timeFormat","showTimezone","showSeconds","vertical","horizontal","TickDetailSummary","Tabs","selectedTabId","onChange","Tab","height","overflowY","Subtitle2","PartitionsTable","partitions","error","PythonErrorInfo","skipReason","strong","QueryfulTickLogsTable","isAssetDaemonTick","InstigationTickStatus","STARTED","display","gridTemplateColumns","requestedAssetMaterializationCount","ButtonLink","showCustomAlert","body","Timestamp","unix","endTimestamp","formatElapsedTimeWithoutMsec","Table","thead","tr","th","tbody","flatMap","partition","map","key","td","MiddleTruncate","text","partitionsDefName","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","MAX_OPACITY","RunStatusPezList","fade","jobName","count","max","ii","OverlayContainer","OverlayTitle","RunRow","fontSize","top","SummaryContainer","FontFamily","default","TickLogDialog","TICK_LOG_EVENTS_QUERY","Number","notifyOnNetworkStatusChange","events","logEvents","DialogBody","TickLogsTable","tickStatus","instigationType","instigationLoggingDocsUrl","action","ExternalAnchorButton","href","rightIcon","ColumnWidthsProvider","onWidthsChanged","Headers","event","idx","TickLogRow","widths","useContext","ColumnWidthsContext","HeadersContainer","Header","eventType","onResize","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_13__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_14__","HeaderContainer","handleSide","Row","level","highlighted","EventTypeColumn","span","marginLeft","TimestampColumn","time"],"sourceRoot":""}
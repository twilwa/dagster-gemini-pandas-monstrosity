{"version":3,"file":"static/chunks/318.373647d2acef0906.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceHealthPage.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/useCanSeeConfig.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, PageHeader, Subheading} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {DaemonList} from './DaemonList';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {InstanceHealthQuery, InstanceHealthQueryVariables} from './types/InstanceHealthPage.types';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const InstanceHealthPageContent = () => {\n  useTrackPageView();\n  useDocumentTitle('Daemons');\n\n  const queryData = useQuery<InstanceHealthQuery, InstanceHealthQueryVariables>(\n    INSTANCE_HEALTH_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n  const {loading, data} = queryData;\n\n  const daemonContent = () => {\n    if (loading && !data?.instance) {\n      return (\n        <Box padding={{horizontal: 24}} style={{color: Colors.textLight()}}>\n          Loadingâ€¦\n        </Box>\n      );\n    }\n    return data?.instance ? (\n      <DaemonList daemonStatuses={data.instance.daemonHealth.allDaemonStatuses} />\n    ) : null;\n  };\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Subheading>Daemon statuses</Subheading>\n        <div>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </div>\n      </Box>\n      {daemonContent()}\n    </>\n  );\n};\n\nexport const InstanceHealthPage = () => {\n  const {pageTitle} = useContext(InstancePageContext);\n  return (\n    <>\n      <PageHeader title={<Heading>{pageTitle}</Heading>} tabs={<InstanceTabs tab=\"health\" />} />\n      <InstanceHealthPageContent />\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceHealthPage;\n\nconst INSTANCE_HEALTH_QUERY = gql`\n  query InstanceHealthQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n"],"names":["InstanceHealthPageContent","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","loading","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsxs","Fragment","Box","padding","vertical","horizontal","flex","direction","alignItems","justifyContent","jsx","Subheading","div","QueryRefreshCountdown","instance","DaemonList","daemonStatuses","daemonHealth","allDaemonStatuses","style","color","Colors","InstanceHealthPage","pageTitle","useContext","InstancePageContext","PageHeader","title","Heading","tabs","InstanceTabs","tab","__webpack_exports__","gql","INSTANCE_HEALTH_FRAGMENT","InstanceWarningIcon","memo","daemons","DeploymentStatusContext","jsx_runtime","WarningTooltip","content","position","modifiers","offset","enabled","options","Icon","name","WorkspaceStatus","param","placeholder","codeLocations","type","Tooltip","placement","Spinner","purpose","fillColor","width","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","id","to","icon","bottom","INSTANCE_CONFIG_HAS_INFO","hasInfo"],"sourceRoot":""}
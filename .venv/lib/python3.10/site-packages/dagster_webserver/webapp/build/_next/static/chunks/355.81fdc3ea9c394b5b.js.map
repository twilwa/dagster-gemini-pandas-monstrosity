{"version":3,"file":"static/chunks/355.81fdc3ea9c394b5b.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/hooks/useFavicon.tsx","webpack://_N_E/../ui-core/src/runs/Run.tsx","webpack://_N_E/../ui-core/src/runs/RunAssetTags.tsx","webpack://_N_E/../ui-core/src/runs/RunHeaderActions.tsx","webpack://_N_E/../ui-core/src/runs/RunRootTrace.tsx","webpack://_N_E/../ui-core/src/runs/RunTimingTags.tsx","webpack://_N_E/../ui-core/src/runs/TickTagForRun.tsx","webpack://_N_E/../ui-core/src/assets/AutomaterializeTagWithEvaluation.tsx","webpack://_N_E/../ui-core/src/runs/RunRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {useEffect} from 'react';\n\nexport const useFavicon = (href: string) => {\n  useEffect(() => {\n    const el = document.querySelector('link[rel=\"icon\"][type=\"image/svg+xml\"]');\n    if (!el) {\n      return;\n    }\n    const previousHref = el.getAttribute('href');\n    el.setAttribute('href', href);\n    return () => {\n      if (previousHref) {\n        el.setAttribute('href', previousHref);\n      }\n    };\n  }, [href]);\n};\n","import {\n  Box,\n  Button,\n  Colors,\n  ErrorBoundary,\n  Icon,\n  NonIdealState,\n  SplitPanelContainer,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport styled from 'styled-components';\n\nimport {CapturedOrExternalLogPanel} from './CapturedLogPanel';\nimport {ComputeLogPanel} from './ComputeLogPanel';\nimport {LogFilter, LogsProvider, LogsProviderLogs} from './LogsProvider';\nimport {LogsScrollingTable} from './LogsScrollingTable';\nimport {LogType, LogsToolbar} from './LogsToolbar';\nimport {RunActionButtons} from './RunActionButtons';\nimport {RunContext} from './RunContext';\nimport {IRunMetadataDict, RunMetadataProvider} from './RunMetadataProvider';\nimport {RunRootTrace} from './RunRootTrace';\nimport {RunDagsterRunEventFragment, RunPageFragment} from './types/RunFragments.types';\nimport {\n  matchingComputeLogKeyFromStepKey,\n  useComputeLogFileKeyForSelection,\n} from './useComputeLogFileKeyForSelection';\nimport {useQueryPersistedLogFilter} from './useQueryPersistedLogFilter';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {GanttChart, GanttChartLoadingState, GanttChartMode, QueuedState} from '../gantt/GanttChart';\nimport {toGraphQueryItems} from '../gantt/toGraphQueryItems';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useFavicon} from '../hooks/useFavicon';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSupportsCapturedLogs} from '../instance/useSupportsCapturedLogs';\n\ninterface RunProps {\n  runId: string;\n  run?: RunPageFragment;\n  trace: RunRootTrace;\n}\n\nconst runStatusFavicon = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.FAILURE:\n      return '/favicon-run-failed.svg';\n    case RunStatus.SUCCESS:\n      return '/favicon-run-success.svg';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n    case RunStatus.CANCELING:\n      return '/favicon-run-pending.svg';\n    default:\n      return '/favicon.svg';\n  }\n};\n\nexport const Run = (props: RunProps) => {\n  const {run, runId, trace} = props;\n  const [logsFilter, setLogsFilter] = useQueryPersistedLogFilter();\n  const [selectionQuery, setSelectionQuery] = useQueryPersistedState<string>({\n    queryKey: 'selection',\n    defaults: {selection: ''},\n  });\n\n  useFavicon(run ? runStatusFavicon(run.status) : '/favicon.svg');\n  useDocumentTitle(\n    run\n      ? `${!isHiddenAssetGroupJob(run.pipelineName) ? run.pipelineName : ''} ${runId.slice(\n          0,\n          8,\n        )} [${run.status}]`\n      : `Run: ${runId}`,\n  );\n\n  const onShowStateDetails = (stepKey: string, logs: RunDagsterRunEventFragment[]) => {\n    const errorNode = logs.find(\n      (node) => node.__typename === 'ExecutionStepFailureEvent' && node.stepKey === stepKey,\n    );\n\n    if (errorNode) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={errorNode} />,\n      });\n    }\n  };\n\n  const onSetSelectionQuery = (query: string) => {\n    setSelectionQuery(query);\n    setLogsFilter({\n      ...logsFilter,\n      logQuery: query !== '*' ? [{token: 'query', value: query}] : [],\n    });\n  };\n\n  return (\n    <RunContext.Provider value={run}>\n      <LogsProvider key={runId} runId={runId}>\n        {(logs) => (\n          <>\n            <OnLogsLoaded trace={trace} />\n            <RunMetadataProvider logs={logs}>\n              {(metadata) => (\n                <RunWithData\n                  run={run}\n                  runId={runId}\n                  logs={logs}\n                  logsFilter={logsFilter}\n                  metadata={metadata}\n                  selectionQuery={selectionQuery}\n                  onSetLogsFilter={setLogsFilter}\n                  onSetSelectionQuery={onSetSelectionQuery}\n                  onShowStateDetails={onShowStateDetails}\n                />\n              )}\n            </RunMetadataProvider>\n          </>\n        )}\n      </LogsProvider>\n    </RunContext.Provider>\n  );\n};\n\nconst OnLogsLoaded = ({trace}: {trace: RunRootTrace}) => {\n  React.useLayoutEffect(() => {\n    trace.onLogsLoaded();\n  }, [trace]);\n  return null;\n};\n\ninterface RunWithDataProps {\n  run?: RunPageFragment;\n  runId: string;\n  selectionQuery: string;\n  logs: LogsProviderLogs;\n  logsFilter: LogFilter;\n  metadata: IRunMetadataDict;\n  onSetLogsFilter: (v: LogFilter) => void;\n  onSetSelectionQuery: (query: string) => void;\n  onShowStateDetails: (stepKey: string, logs: RunDagsterRunEventFragment[]) => void;\n}\n\nconst logTypeFromQuery = (queryLogType: string) => {\n  switch (queryLogType) {\n    case 'stdout':\n      return LogType.stdout;\n    case 'stderr':\n      return LogType.stderr;\n    default:\n      return LogType.structured;\n  }\n};\n\n/**\n * Note: There are two places we keep a \"step query string\" in the Run view:\n * selectionQuery and logsFilter.logsQuery.\n *\n * - selectionQuery is set when you click around in the Gannt view and is the\n *   selection used for re-execution, etc. When set, we autofill logsFilter.logsQuery.\n *\n * - logsFilter.logsQuery is used for filtering the logs. It can be cleared separately\n *   from the selectionQuery, so you can select a step but navigate elsewhere in the logs.\n *\n * We could revisit this in the future but I believe we iterated quite a bit to get to this\n * solution and we should avoid locking the two filter inputs together completely.\n */\nconst RunWithData = ({\n  run,\n  runId,\n  logs,\n  logsFilter,\n  metadata,\n  selectionQuery,\n  onSetLogsFilter,\n  onSetSelectionQuery,\n}: RunWithDataProps) => {\n  const [queryLogType, setQueryLogType] = useQueryPersistedState<string>({\n    queryKey: 'logType',\n    defaults: {logType: LogType.structured},\n  });\n\n  const logType = logTypeFromQuery(queryLogType);\n  const setLogType = (lt: LogType) => setQueryLogType(LogType[lt]);\n  const [computeLogUrl, setComputeLogUrl] = React.useState<string | null>(null);\n\n  const stepKeysJSON = JSON.stringify(Object.keys(metadata.steps).sort());\n  const stepKeys = React.useMemo(() => JSON.parse(stepKeysJSON), [stepKeysJSON]);\n\n  const runtimeGraph = run?.executionPlan && toGraphQueryItems(run?.executionPlan, metadata.steps);\n\n  const selectionStepKeys = React.useMemo(() => {\n    return runtimeGraph && selectionQuery && selectionQuery !== '*'\n      ? filterByQuery(runtimeGraph, selectionQuery).all.map((n) => n.name)\n      : [];\n  }, [runtimeGraph, selectionQuery]);\n\n  const supportsCapturedLogs = useSupportsCapturedLogs();\n  const {logCaptureInfo, computeLogFileKey, setComputeLogFileKey} =\n    useComputeLogFileKeyForSelection({\n      stepKeys,\n      selectionStepKeys,\n      metadata,\n      defaultToFirstStep: false,\n    });\n\n  const logsFilterStepKeys = runtimeGraph\n    ? logsFilter.logQuery\n        .filter((v) => v.token && v.token === 'query')\n        .reduce((accum, v) => {\n          return [...accum, ...filterByQuery(runtimeGraph, v.value).all.map((n) => n.name)];\n        }, [] as string[])\n    : [];\n\n  const onClickStep = (stepKey: string, evt: React.MouseEvent<any>) => {\n    const index = selectionStepKeys.indexOf(stepKey);\n    let newSelected: string[];\n    const filterForExactStep = `\"${stepKey}\"`;\n    if (evt.shiftKey) {\n      // shift-click to multi select steps, preserving quotations if present\n      newSelected = [\n        ...selectionStepKeys.map((k) => (selectionQuery.includes(`\"${k}\"`) ? `\"${k}\"` : k)),\n      ];\n\n      if (index !== -1) {\n        // deselect the step if already selected\n        newSelected.splice(index, 1);\n      } else {\n        // select the step otherwise\n        newSelected.push(filterForExactStep);\n      }\n    } else {\n      if (selectionStepKeys.length === 1 && index !== -1) {\n        // deselect the step if already selected\n        newSelected = [];\n      } else {\n        // select the step otherwise\n        newSelected = [filterForExactStep];\n\n        // When only one step is selected, set the compute log key as well.\n        const matchingLogKey = matchingComputeLogKeyFromStepKey(metadata.logCaptureSteps, stepKey);\n        matchingLogKey && setComputeLogFileKey(matchingLogKey);\n      }\n    }\n\n    onSetSelectionQuery(newSelected.join(', ') || '*');\n  };\n\n  const [splitPanelContainer, setSplitPanelContainer] = React.useState<null | SplitPanelContainer>(\n    null,\n  );\n  React.useEffect(() => {\n    const initialSize = splitPanelContainer?.getSize();\n    switch (initialSize) {\n      case 100:\n        setExpandedPanel('top');\n        return;\n      case 0:\n        setExpandedPanel('bottom');\n        return;\n    }\n  }, [splitPanelContainer]);\n\n  const [expandedPanel, setExpandedPanel] = React.useState<null | 'top' | 'bottom'>(null);\n  const isTopExpanded = expandedPanel === 'top';\n  const isBottomExpanded = expandedPanel === 'bottom';\n\n  const expandBottomPanel = () => {\n    splitPanelContainer?.onChangeSize(0);\n    setExpandedPanel('bottom');\n  };\n  const expandTopPanel = () => {\n    splitPanelContainer?.onChangeSize(100);\n    setExpandedPanel('top');\n  };\n  const resetPanels = () => {\n    splitPanelContainer?.onChangeSize(50);\n    setExpandedPanel(null);\n  };\n\n  const gantt = (metadata: IRunMetadataDict) => {\n    if (!run) {\n      return <GanttChartLoadingState runId={runId} />;\n    }\n\n    if (run.status === 'QUEUED') {\n      return <QueuedState run={run} />;\n    }\n\n    if (run.executionPlan && runtimeGraph) {\n      return (\n        <ErrorBoundary region=\"gantt chart\">\n          <GanttChart\n            options={{\n              mode: GanttChartMode.WATERFALL_TIMED,\n            }}\n            toolbarActions={\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                <Tooltip content={isTopExpanded ? 'Collapse' : 'Expand'}>\n                  <Button\n                    icon={<Icon name={isTopExpanded ? 'collapse_arrows' : 'expand_arrows'} />}\n                    onClick={isTopExpanded ? resetPanels : expandTopPanel}\n                  />\n                </Tooltip>\n                <RunActionButtons\n                  run={run}\n                  graph={runtimeGraph}\n                  metadata={metadata}\n                  selection={{query: selectionQuery, keys: selectionStepKeys}}\n                />\n              </Box>\n            }\n            runId={runId}\n            graph={runtimeGraph}\n            metadata={metadata}\n            selection={{query: selectionQuery, keys: selectionStepKeys}}\n            onClickStep={onClickStep}\n            onSetSelection={onSetSelectionQuery}\n            focusedTime={logsFilter.focusedTime}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    return <NonIdealState icon=\"error\" title=\"Unable to build execution plan\" />;\n  };\n\n  return (\n    <>\n      <SplitPanelContainer\n        ref={(container) => {\n          setSplitPanelContainer(container);\n        }}\n        axis=\"vertical\"\n        identifier=\"run-gantt\"\n        firstInitialPercent={35}\n        firstMinSize={56}\n        first={gantt(metadata)}\n        second={\n          <ErrorBoundary region=\"logs\">\n            <LogsContainer>\n              <LogsToolbar\n                logType={logType}\n                onSetLogType={setLogType}\n                filter={logsFilter}\n                onSetFilter={onSetLogsFilter}\n                steps={stepKeys}\n                metadata={metadata}\n                computeLogFileKey={computeLogFileKey}\n                onSetComputeLogKey={setComputeLogFileKey}\n                computeLogUrl={computeLogUrl}\n                counts={logs.counts}\n                isSectionExpanded={isBottomExpanded}\n                toggleExpanded={isBottomExpanded ? resetPanels : expandBottomPanel}\n              />\n              {logType !== LogType.structured ? (\n                !computeLogFileKey ? (\n                  <NoStepSelectionState type={logType} />\n                ) : supportsCapturedLogs ? (\n                  <CapturedOrExternalLogPanel\n                    logKey={computeLogFileKey ? [runId, 'compute_logs', computeLogFileKey] : []}\n                    logCaptureInfo={logCaptureInfo}\n                    visibleIOType={LogType[logType]}\n                    onSetDownloadUrl={setComputeLogUrl}\n                  />\n                ) : (\n                  <ComputeLogPanel\n                    runId={runId}\n                    computeLogFileKey={stepKeys.length ? computeLogFileKey : undefined}\n                    ioType={LogType[logType]}\n                    setComputeLogUrl={setComputeLogUrl}\n                  />\n                )\n              ) : (\n                <LogsScrollingTable\n                  logs={logs}\n                  filter={logsFilter}\n                  filterStepKeys={logsFilterStepKeys}\n                  filterKey={`${JSON.stringify(logsFilter)}`}\n                  metadata={metadata}\n                />\n              )}\n            </LogsContainer>\n          </ErrorBoundary>\n        }\n      />\n    </>\n  );\n};\n\nconst LogsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst NoStepSelectionState = ({type}: {type: LogType}) => {\n  return (\n    <Box\n      flex={{\n        direction: 'row',\n        grow: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      style={{background: Colors.backgroundDefault()}}\n    >\n      <NonIdealState\n        title={`Select a step to view ${type}`}\n        icon=\"warning\"\n        description=\"Select a step on the Gantt chart or from the dropdown above to view logs.\"\n      />\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {AssetKeyTagCollection} from './AssetTagCollections';\nimport {RunAssetsQuery, RunAssetsQueryVariables} from './types/RunAssetTags.types';\nimport {RunFragment} from './types/RunFragments.types';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nexport const RunAssetTags = (props: {run: RunFragment}) => {\n  const {run} = props;\n  const {data, loading} = useQuery<RunAssetsQuery, RunAssetsQueryVariables>(RUN_ASSETS_QUERY, {\n    variables: {runId: run.id},\n    skip: isHiddenAssetGroupJob(run.pipelineName),\n  });\n\n  if (loading || !data || data.pipelineRunOrError.__typename !== 'Run') {\n    return null;\n  }\n\n  return (\n    <AssetKeyTagCollection useTags assetKeys={data.pipelineRunOrError.assets.map((a) => a.key)} />\n  );\n};\n\nconst RUN_ASSETS_QUERY = gql`\n  query RunAssetsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        assets {\n          id\n          key {\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n","import {useMutation} from '@apollo/client';\nimport {Button, Group, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {DeletionDialog} from './DeletionDialog';\nimport {RunConfigDialog} from './RunConfigDialog';\nimport {doneStatuses} from './RunStatuses';\nimport {RunsQueryRefetchContext} from './RunUtils';\nimport {TerminationDialog} from './TerminationDialog';\nimport {RunFragment} from './types/RunFragments.types';\nimport {AppContext} from '../app/AppContext';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\nimport {FREE_CONCURRENCY_SLOTS_MUTATION} from '../instance/InstanceConcurrency';\nimport {\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n} from '../instance/types/InstanceConcurrency.types';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {workspacePipelineLinkForRun, workspacePipelinePath} from '../workspace/workspacePath';\n\ntype VisibleDialog = 'config' | 'delete' | 'terminate' | 'free_slots' | null;\n\nexport const RunHeaderActions = ({run, isJob}: {run: RunFragment; isJob: boolean}) => {\n  const {runConfigYaml} = run;\n  const [visibleDialog, setVisibleDialog] = useState<VisibleDialog>(null);\n\n  const {rootServerURI} = useContext(AppContext);\n  const {refetch} = useContext(RunsQueryRefetchContext);\n\n  const copy = useCopyToClipboard();\n  const history = useHistory();\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  const copyConfig = async () => {\n    copy(runConfigYaml);\n    await showSharedToaster({\n      intent: 'success',\n      icon: 'copy_to_clipboard_done',\n      message: 'Copied!',\n    });\n  };\n\n  const freeConcurrencySlots = async () => {\n    const resp = await freeSlots({variables: {runId: run.id}});\n    if (resp.data?.freeConcurrencySlots) {\n      await showSharedToaster({\n        intent: 'success',\n        icon: 'check_circle',\n        message: 'Freed concurrency slots',\n      });\n    }\n  };\n\n  const jobLink = workspacePipelineLinkForRun({\n    repositoryName: run.repositoryOrigin?.repositoryName,\n    repositoryLocationName: run.repositoryOrigin?.repositoryLocationName,\n    run,\n    isJob,\n  });\n\n  return (\n    <div>\n      <Group direction=\"row\" spacing={8}>\n        {jobLink.disabledReason ? (\n          <Tooltip content={jobLink.disabledReason} useDisabledButtonTooltipFix>\n            <Button icon={<Icon name={jobLink.icon} />} disabled>\n              {jobLink.label}\n            </Button>\n          </Tooltip>\n        ) : (\n          <AnchorButton icon={<Icon name={jobLink.icon} />} to={jobLink.to}>\n            {jobLink.label}\n          </AnchorButton>\n        )}\n        <Button icon={<Icon name=\"tag\" />} onClick={() => setVisibleDialog('config')}>\n          View tags and config\n        </Button>\n        <Popover\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <Tooltip\n                content=\"Loadable in dagster-webserver-debug\"\n                position=\"left\"\n                targetTagName=\"div\"\n              >\n                <MenuItem\n                  text=\"Download debug file\"\n                  icon=\"download_for_offline\"\n                  onClick={() => window.open(`${rootServerURI}/download_debug/${run.id}`)}\n                />\n              </Tooltip>\n              {run.hasConcurrencyKeySlots && doneStatuses.has(run.status) ? (\n                <MenuItem\n                  text=\"Free concurrency slots\"\n                  icon=\"lock\"\n                  onClick={freeConcurrencySlots}\n                />\n              ) : null}\n              {run.hasDeletePermission ? (\n                <MenuItem\n                  icon=\"delete\"\n                  text=\"Delete\"\n                  intent=\"danger\"\n                  onClick={() => setVisibleDialog('delete')}\n                />\n              ) : null}\n            </Menu>\n          }\n        >\n          <Button icon={<Icon name=\"expand_more\" />} />\n        </Popover>\n      </Group>\n      <RunConfigDialog\n        isOpen={visibleDialog === 'config'}\n        onClose={() => setVisibleDialog(null)}\n        copyConfig={() => copyConfig()}\n        mode={run.mode}\n        runConfigYaml={run.runConfigYaml}\n        tags={run.tags}\n        isJob={isJob}\n      />\n      {run.hasDeletePermission ? (\n        <DeletionDialog\n          isOpen={visibleDialog === 'delete'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            if (run.repositoryOrigin) {\n              history.push(\n                workspacePipelinePath({\n                  repoName: run.repositoryOrigin.repositoryName,\n                  repoLocation: run.repositoryOrigin.repositoryLocationName,\n                  pipelineName: run.pipelineName,\n                  isJob,\n                  path: '/runs',\n                }),\n              );\n            } else {\n              setVisibleDialog(null);\n            }\n          }}\n          onTerminateInstead={() => setVisibleDialog('terminate')}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n      {run.hasTerminatePermission ? (\n        <TerminationDialog\n          isOpen={visibleDialog === 'terminate'}\n          onClose={() => setVisibleDialog(null)}\n          onComplete={() => {\n            refetch();\n          }}\n          selectedRuns={{[run.id]: run.canTerminate}}\n        />\n      ) : null}\n    </div>\n  );\n};\n","import {useMemo} from 'react';\n\nimport {usePageLoadTrace} from '../performance';\n\nexport const useRunRootTrace = () => {\n  const trace = usePageLoadTrace('RunRoot');\n  return useMemo(() => {\n    let logsLoaded = false;\n    let runsLoaded = false;\n    function onLoaded() {\n      if (logsLoaded && runsLoaded) {\n        trace.endTrace();\n      }\n    }\n    return {\n      onLogsLoaded() {\n        logsLoaded = true;\n        onLoaded();\n      },\n      onRunLoaded() {\n        runsLoaded = true;\n        onLoaded();\n      },\n    };\n  }, [trace]);\n};\n\nexport type RunRootTrace = ReturnType<typeof useRunRootTrace>;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {RunTimingDetails} from './RunTimingDetails';\nimport {RunTimingFragment} from './types/RunTimingDetails.types';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const RunTimingTags = ({loading, run}: {loading: boolean; run: RunTimingFragment}) => {\n  return (\n    <>\n      {run?.startTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"schedule\">\n            <TimestampDisplay\n              timestamp={run.startTime}\n              timeFormat={{showSeconds: true, showTimezone: false}}\n            />\n          </Tag>\n        </Popover>\n      ) : run.updateTime ? (\n        <Tag icon=\"schedule\">\n          <TimestampDisplay\n            timestamp={run.updateTime}\n            timeFormat={{showSeconds: true, showTimezone: false}}\n          />\n        </Tag>\n      ) : undefined}\n      {run?.startTime && run?.endTime ? (\n        <Popover\n          interactionKind=\"hover\"\n          placement=\"bottom\"\n          content={\n            <Box padding={16}>\n              <RunTimingDetails run={run} loading={loading} />\n            </Box>\n          }\n        >\n          <Tag icon=\"timer\">\n            <span style={{fontVariantNumeric: 'tabular-nums'}}>\n              {run?.startTime\n                ? formatElapsedTimeWithoutMsec(\n                    (run?.endTime * 1000 || Date.now()) - run?.startTime * 1000,\n                  )\n                : '–'}\n            </span>\n          </Tag>\n        </Popover>\n      ) : null}\n    </>\n  );\n};\n","import {ButtonLink, MiddleTruncate, Tag} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {DagsterTag} from './RunTag';\nimport {InstigationSelector} from '../graphql/types';\nimport {TickDetailsDialog} from '../instigation/TickDetailsDialog';\n\ninterface Props {\n  instigationSelector: InstigationSelector;\n  instigationType: DagsterTag.SensorName | DagsterTag.ScheduleName;\n  tickId: string;\n}\n\nexport const TickTagForRun = ({instigationSelector, instigationType, tickId}: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const icon = instigationType === DagsterTag.ScheduleName ? 'schedule' : 'sensors';\n  const {name} = instigationSelector;\n\n  return (\n    <>\n      <Tag icon={icon}>\n        <span>\n          Launched by{' '}\n          <ButtonLink onClick={() => setIsOpen(true)}>\n            <div style={{maxWidth: '140px'}}>\n              <MiddleTruncate text={name} />\n            </div>\n          </ButtonLink>\n        </span>\n      </Tag>\n      <TickDetailsDialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        instigationSelector={instigationSelector}\n        tickId={Number(tickId)}\n      />\n    </>\n  );\n};\n","import {Box, Icon, MiddleTruncate, Popover, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetKey} from './types';\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base'});\n\ninterface Props {\n  assetKeys: AssetKey[];\n  evaluationId: string;\n}\n\nexport const AutomaterializeTagWithEvaluation = ({assetKeys, evaluationId}: Props) => {\n  const sortedKeys = useMemo(() => {\n    return [...assetKeys].sort((a, b) => COLLATOR.compare(a.path.join('/'), b.path.join('/')));\n  }, [assetKeys]);\n\n  return (\n    <Popover\n      placement=\"bottom\"\n      content={\n        <div style={{width: '340px'}}>\n          <Box padding={{vertical: 8, horizontal: 12}} border=\"bottom\" style={{fontWeight: 600}}>\n            Auto-materialized\n          </Box>\n          <Box\n            flex={{direction: 'column', gap: 12}}\n            padding={{vertical: 12}}\n            style={{maxHeight: '220px', overflowY: 'auto'}}\n          >\n            {sortedKeys.map((assetKey) => {\n              const url = assetDetailsPathForKey(assetKey, {\n                view: 'automation',\n                evaluation: evaluationId,\n              });\n              return (\n                <Box\n                  key={url}\n                  padding={{vertical: 8, left: 12, right: 16}}\n                  flex={{\n                    direction: 'row',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    gap: 8,\n                  }}\n                  style={{overflow: 'hidden'}}\n                >\n                  <Box\n                    flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                    style={{overflow: 'hidden'}}\n                  >\n                    <Icon name=\"asset\" />\n                    <MiddleTruncate text={assetKey.path.join('/')} />\n                  </Box>\n                  <Link to={url} style={{whiteSpace: 'nowrap'}}>\n                    View evaluation\n                  </Link>\n                </Box>\n              );\n            })}\n          </Box>\n        </div>\n      }\n      interactionKind=\"hover\"\n    >\n      <Tag icon=\"auto_materialize_policy\">Auto-materialized</Tag>\n    </Popover>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, FontFamily, Heading, NonIdealState, PageHeader, Tag} from '@dagster-io/ui-components';\nimport {useLayoutEffect, useMemo} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {AssetCheckTagCollection, AssetKeyTagCollection} from './AssetTagCollections';\nimport {Run} from './Run';\nimport {RunAssetTags} from './RunAssetTags';\nimport {RUN_PAGE_FRAGMENT} from './RunFragments';\nimport {RunHeaderActions} from './RunHeaderActions';\nimport {RunRootTrace, useRunRootTrace} from './RunRootTrace';\nimport {RunStatusTag} from './RunStatusTag';\nimport {DagsterTag} from './RunTag';\nimport {RunTimingTags} from './RunTimingTags';\nimport {assetKeysForRun} from './RunUtils';\nimport {TickTagForRun} from './TickTagForRun';\nimport {RunRootQuery, RunRootQueryVariables} from './types/RunRoot.types';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {AutomaterializeTagWithEvaluation} from '../assets/AutomaterializeTagWithEvaluation';\nimport {InstigationSelector} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\nexport const RunRoot = () => {\n  useTrackPageView();\n\n  const trace = useRunRootTrace();\n  const {runId} = useParams<{runId: string}>();\n  useDocumentTitle(runId ? `Run ${runId.slice(0, 8)}` : 'Run');\n\n  const {data, loading} = useQuery<RunRootQuery, RunRootQueryVariables>(RUN_ROOT_QUERY, {\n    variables: {runId},\n  });\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data.pipelineRunOrError : null;\n  const snapshotID = run?.pipelineSnapshotId;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const repoAddress = repoMatch?.match\n    ? buildRepoAddress(repoMatch.match.repository.name, repoMatch.match.repositoryLocation.name)\n    : null;\n\n  const isJob = useMemo(\n    () => !!(run && repoMatch && isThisThingAJob(repoMatch.match, run.pipelineName)),\n    [run, repoMatch],\n  );\n\n  const automaterializeTag = useMemo(\n    () => run?.tags.find((tag) => tag.key === DagsterTag.AssetEvaluationID) || null,\n    [run],\n  );\n\n  useLayoutEffect(() => {\n    if (!loading) {\n      trace.onRunLoaded();\n    }\n  }, [loading, trace]);\n\n  const tickDetails = useMemo(() => {\n    if (repoAddress) {\n      const tags = run?.tags || [];\n      const tickTag = tags.find((tag) => tag.key === DagsterTag.TickId);\n\n      if (tickTag) {\n        const scheduleOrSensor = tags.find(\n          (tag) => tag.key === DagsterTag.ScheduleName || tag.key === DagsterTag.SensorName,\n        );\n        if (scheduleOrSensor) {\n          const instigationSelector: InstigationSelector = {\n            name: scheduleOrSensor.value,\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n          };\n          return {\n            tickId: tickTag.value,\n            instigationType: scheduleOrSensor.key as\n              | DagsterTag.ScheduleName\n              | DagsterTag.SensorName,\n            instigationSelector,\n          };\n        }\n      }\n    }\n\n    return null;\n  }, [run, repoAddress]);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <Box\n        flex={{direction: 'row', alignItems: 'flex-start'}}\n        style={{\n          position: 'relative',\n          zIndex: 1,\n        }}\n      >\n        <PageHeader\n          title={\n            <Heading style={{fontFamily: FontFamily.monospace, fontSize: '20px'}}>\n              {runId.slice(0, 8)}\n            </Heading>\n          }\n          tags={\n            run ? (\n              <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n                <RunStatusTag status={run.status} />\n                {!isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <Tag icon=\"run\">\n                    Run of{' '}\n                    <PipelineReference\n                      pipelineName={run?.pipelineName}\n                      pipelineHrefContext={repoAddress || 'repo-unknown'}\n                      snapshotId={snapshotID}\n                      size=\"small\"\n                      isJob={isJob}\n                    />\n                  </Tag>\n                ) : null}\n                {tickDetails ? (\n                  <TickTagForRun\n                    instigationSelector={tickDetails.instigationSelector}\n                    instigationType={tickDetails.instigationType}\n                    tickId={tickDetails.tickId}\n                  />\n                ) : null}\n                {isHiddenAssetGroupJob(run.pipelineName) ? (\n                  <AssetKeyTagCollection useTags assetKeys={assetKeysForRun(run)} />\n                ) : (\n                  <RunAssetTags run={run} />\n                )}\n                <AssetCheckTagCollection useTags assetChecks={run.assetCheckSelection} />\n                <RunTimingTags run={run} loading={loading} />\n                {automaterializeTag && run.assetSelection?.length ? (\n                  <AutomaterializeTagWithEvaluation\n                    assetKeys={run.assetSelection}\n                    evaluationId={automaterializeTag.value}\n                  />\n                ) : null}\n              </Box>\n            ) : null\n          }\n          right={run ? <RunHeaderActions run={run} isJob={isJob} /> : null}\n        />\n      </Box>\n      <RunById data={data} runId={runId} trace={trace} />\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default RunRoot;\n\nconst RunById = (props: {data: RunRootQuery | undefined; runId: string; trace: RunRootTrace}) => {\n  const {data, runId, trace} = props;\n\n  if (!data || !data.pipelineRunOrError) {\n    return <Run run={undefined} runId={runId} trace={trace} />;\n  }\n\n  if (data.pipelineRunOrError.__typename !== 'Run') {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No run found\"\n          description=\"The run with this ID does not exist or has been cleaned up.\"\n        />\n      </Box>\n    );\n  }\n\n  return <Run run={data.pipelineRunOrError} runId={runId} trace={trace} />;\n};\n\nconst RUN_ROOT_QUERY = gql`\n  query RunRootQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        ...RunPageFragment\n      }\n    }\n  }\n\n  ${RUN_PAGE_FRAGMENT}\n`;\n"],"names":["useFavicon","href","useEffect","el","document","querySelector","previousHref","getAttribute","setAttribute","runStatusFavicon","status","RunStatus","FAILURE","SUCCESS","STARTING","STARTED","CANCELING","Run","props","run","runId","trace","useQueryPersistedLogFilter","logsFilter","setLogsFilter","useQueryPersistedState","queryKey","defaults","selection","selectionQuery","setSelectionQuery","useDocumentTitle","isHiddenAssetGroupJob","pipelineName","slice","concat","onShowStateDetails","stepKey","logs","errorNode","find","node","__typename","showCustomAlert","body","jsx_runtime","jsx","PythonErrorInfo","error","onSetSelectionQuery","query","_object_spread_props","_","_object_spread","logQuery","token","value","RunContext","Provider","LogsProvider","jsxs","Fragment","OnLogsLoaded","RunMetadataProvider","metadata","RunWithData","onSetLogsFilter","param","React","onLogsLoaded","logTypeFromQuery","queryLogType","LogType","stdout","stderr","structured","logType","setQueryLogType","computeLogUrl","setComputeLogUrl","stepKeysJSON","JSON","stringify","Object","keys","steps","sort","stepKeys","parse","runtimeGraph","executionPlan","toGraphQueryItems","selectionStepKeys","filterByQuery","all","map","n","name","supportsCapturedLogs","useSupportsCapturedLogs","useComputeLogFileKeyForSelection","defaultToFirstStep","logCaptureInfo","computeLogFileKey","setComputeLogFileKey","logsFilterStepKeys","filter","v","reduce","accum","_to_consumable_array","splitPanelContainer","setSplitPanelContainer","getSize","setExpandedPanel","expandedPanel","isTopExpanded","isBottomExpanded","resetPanels","onChangeSize","SplitPanelContainer","ref","container","axis","identifier","firstInitialPercent","firstMinSize","first","QueuedState","ErrorBoundary","region","GanttChart","options","mode","GanttChartMode","WATERFALL_TIMED","toolbarActions","Box","flex","direction","alignItems","gap","Tooltip","content","Button","icon","Icon","onClick","RunActionButtons","graph","onClickStep","evt","newSelected","index","indexOf","filterForExactStep","shiftKey","k","includes","splice","push","length","matchingLogKey","matchingComputeLogKeyFromStepKey","logCaptureSteps","join","onSetSelection","focusedTime","NonIdealState","title","GanttChartLoadingState","second","LogsContainer","LogsToolbar","onSetLogType","lt","onSetFilter","onSetComputeLogKey","counts","isSectionExpanded","toggleExpanded","CapturedOrExternalLogPanel","logKey","visibleIOType","onSetDownloadUrl","ComputeLogPanel","undefined","ioType","NoStepSelectionState","type","LogsScrollingTable","filterStepKeys","filterKey","styled","div","withConfig","grow","justifyContent","style","background","Colors","description","RunAssetTags","useQuery","RUN_ASSETS_QUERY","variables","id","skip","data","loading","pipelineRunOrError","AssetKeyTagCollection","useTags","assetKeys","assets","a","key","gql","RunHeaderActions","isJob","runConfigYaml","useState","visibleDialog","setVisibleDialog","rootServerURI","useContext","AppContext","refetch","RunsQueryRefetchContext","copy","useCopyToClipboard","history","useHistory","freeSlots","useMutation","FREE_CONCURRENCY_SLOTS_MUTATION","copyConfig","_async_to_generator","showSharedToaster","intent","message","_state","sent","freeConcurrencySlots","resp","jobLink","workspacePipelineLinkForRun","repositoryName","repositoryOrigin","repositoryLocationName","Group","spacing","disabledReason","useDisabledButtonTooltipFix","disabled","label","AnchorButton","to","Popover","position","Menu","targetTagName","MenuItem","text","window","open","hasConcurrencyKeySlots","doneStatuses","has","hasDeletePermission","RunConfigDialog","isOpen","onClose","tags","DeletionDialog","onComplete","workspacePipelinePath","repoName","repoLocation","path","onTerminateInstead","selectedRuns","_define_property","canTerminate","hasTerminatePermission","TerminationDialog","useRunRootTrace","usePageLoadTrace","useMemo","onLoaded","logsLoaded","runsLoaded","endTrace","onRunLoaded","RunTimingTags","startTime","interactionKind","placement","padding","RunTimingDetails","Tag","TimestampDisplay","timestamp","timeFormat","showSeconds","showTimezone","updateTime","endTime","span","fontVariantNumeric","formatElapsedTimeWithoutMsec","Date","now","TickTagForRun","instigationSelector","instigationType","tickId","setIsOpen","DagsterTag","ScheduleName","ButtonLink","maxWidth","MiddleTruncate","TickDetailsDialog","Number","COLLATOR","Intl","Collator","navigator","language","sensitivity","AutomaterializeTagWithEvaluation","evaluationId","sortedKeys","b","compare","width","vertical","horizontal","border","fontWeight","maxHeight","overflowY","assetKey","url","assetDetailsPathForKey","view","evaluation","left","right","overflow","Link","whiteSpace","RunRoot","useTrackPageView","useParams","RUN_ROOT_QUERY","snapshotID","pipelineSnapshotId","repoMatch","useRepositoryForRunWithParentSnapshot","repoAddress","match","buildRepoAddress","repository","repositoryLocation","isThisThingAJob","automaterializeTag","tag","AssetEvaluationID","useLayoutEffect","tickDetails","tickTag","TickId","scheduleOrSensor","SensorName","location","display","flexDirection","minWidth","height","zIndex","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","wrap","RunStatusTag","PipelineReference","pipelineHrefContext","snapshotId","size","assetKeysForRun","AssetCheckTagCollection","assetChecks","assetCheckSelection","assetSelection","RunById","runs_RunRoot","RUN_PAGE_FRAGMENT"],"sourceRoot":""}
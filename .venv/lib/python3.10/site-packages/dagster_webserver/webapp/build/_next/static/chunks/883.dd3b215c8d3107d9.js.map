{"version":3,"file":"static/chunks/883.dd3b215c8d3107d9.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializeDot.tsx","webpack://_N_E/../ui-core/src/automation/AutomationTabs.tsx","webpack://_N_E/../ui-core/src/automation/AutomationAutomaterializeRoot.tsx","webpack://_N_E/../ui-core/src/automation/AutomationBackfillsRoot.tsx","webpack://_N_E/../ui-core/src/automation/AutomationSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/automation/AutomationSensorsRoot.tsx","webpack://_N_E/../ui-core/src/automation/AutomationRoot.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {Colors} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nexport const AutomaterializeDot = styled.div<{$paused: boolean | undefined}>`\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  background-color: ${({$paused}) =>\n    $paused === false ? Colors.accentBlue() : Colors.accentGray()};\n`;\n","import {Box, Spinner, Tabs} from '@dagster-io/ui-components';\n\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {AutomaterializeDot} from '../assets/auto-materialization/AutomaterializeDot';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props {\n  tab: string;\n}\n\nexport const AutomationTabs = (props: Props) => {\n  const {tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/automation/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/automation/sensors\" />\n        {automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <AutomaterializeDot $paused={automaterialize.paused} />\n                )}\n              </Box>\n            }\n            to=\"/automation/auto-materialize\"\n          />\n        ) : null}\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/automation/backfills\" />\n      </Tabs>\n    </Box>\n  );\n};\n","import {Heading, Page, PageHeader} from '@dagster-io/ui-components';\nimport {Redirect} from 'react-router-dom';\n\nimport {AutomationTabs} from './AutomationTabs';\nimport {assertUnreachable} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {GlobalAutomaterializationContent} from '../assets/auto-materialization/GlobalAutomaterializationContent';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to the Sensors overview.\nexport const AutomationAutomaterializeRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomationAutomaterializeRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to=\"/automation/sensors\" />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomationAutomaterializeRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation | Auto-materialize');\n  return (\n    <Page>\n      <PageHeader title={<Heading>Automation</Heading>} tabs={<AutomationTabs tab=\"amp\" />} />\n      <GlobalAutomaterializationContent />\n    </Page>\n  );\n};\n","import {Heading, Page, PageHeader} from '@dagster-io/ui-components';\n\nimport {AutomationTabs} from './AutomationTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\n\nexport const AutomationBackfillsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation | Backfills');\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Automation</Heading>} tabs={<AutomationTabs tab=\"backfills\" />} />\n      <InstanceBackfills />\n    </Page>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {AutomationTabs} from './AutomationTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewSchedules} from '../overview/OverviewSchedules';\n\nexport const AutomationSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation | Schedules');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Automation</Heading>} tabs={<AutomationTabs tab=\"schedules\" />} />\n      <OverviewSchedules />\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {AutomationTabs} from './AutomationTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewSensors} from '../overview/OverviewSensors';\n\nexport const AutomationSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation | Sensors');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Automation</Heading>} tabs={<AutomationTabs tab=\"sensors\" />} />\n      <OverviewSensors />\n    </Box>\n  );\n};\n","import {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {AutomationAutomaterializeRoot} from './AutomationAutomaterializeRoot';\nimport {AutomationBackfillsRoot} from './AutomationBackfillsRoot';\nimport {AutomationSchedulesRoot} from './AutomationSchedulesRoot';\nimport {AutomationSensorsRoot} from './AutomationSensorsRoot';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const AutomationRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/automation/schedules\">\n        <AutomationSchedulesRoot />\n      </Route>\n      <Route path=\"/automation/sensors\">\n        <AutomationSensorsRoot />\n      </Route>\n      <Route path=\"/automation/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/automation/backfills\" exact>\n        <AutomationBackfillsRoot />\n      </Route>\n      <Route path=\"/automation/auto-materialize\" exact>\n        <AutomationAutomaterializeRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/automation/schedules\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default AutomationRoot;\n"],"names":["AutomaterializeDot","styled","div","withConfig","param","$paused","Colors","AutomationTabs","props","tab","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","jsx_runtime","jsx","Box","flex","direction","justifyContent","alignItems","jsxs","Tabs","selectedTabId","TabLink","id","title","to","gap","loading","Spinner","purpose","paused","AutomationAutomaterializeRoot","GlobalAutomationAutomaterializeRoot","Redirect","assertUnreachable","useTrackPageView","useDocumentTitle","Page","PageHeader","Heading","tabs","GlobalAutomaterializationContent","AutomationBackfillsRoot","InstanceBackfills","AutomationSchedulesRoot","style","height","overflow","OverviewSchedules","AutomationSensorsRoot","OverviewSensors","AutomationRoot","Switch","Route","path","BackfillPage","exact","render","automation_AutomationRoot"],"sourceRoot":""}
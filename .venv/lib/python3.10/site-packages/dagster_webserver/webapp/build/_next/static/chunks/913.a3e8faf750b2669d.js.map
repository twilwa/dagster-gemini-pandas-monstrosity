{"version":3,"file":"static/chunks/913.a3e8faf750b2669d.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/GlobalAutomaterializationContent.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedules.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensors.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {useCallback, useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationEvaluationHistoryTable} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [statuses, setStatuses] = useQueryPersistedState<Set<InstigationTickStatus>>({\n    queryKey: 'statuses',\n    decode: useCallback(({statuses}: {statuses?: string}) => {\n      return new Set<InstigationTickStatus>(\n        statuses\n          ? JSON.parse(statuses)\n          : [\n              InstigationTickStatus.STARTED,\n              InstigationTickStatus.SUCCESS,\n              InstigationTickStatus.FAILURE,\n              InstigationTickStatus.SKIPPED,\n            ],\n      );\n    }, []),\n    encode: useCallback((raw: Set<InstigationTickStatus>) => {\n      return {statuses: JSON.stringify(Array.from(raw))};\n    }, []),\n  });\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setStatuses={setStatuses}\n      setTableView={setTableView}\n      statuses={statuses}\n    />\n  );\n};\n","import {useLazyQuery} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Spinner, Subtitle2, Table} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const GlobalAutomaterializationContent = () => {\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const getVariables = useCallback(\n    (now = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        afterTimestamp: (now - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    return data?.autoMaterializeTicks || [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks?.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n        <Alert\n          intent=\"info\"\n          title=\"[Experimental] Dagster can automatically materialize assets when criteria are met.\"\n          description={\n            <>\n              Auto-materialization enables a declarative approach to asset scheduling – instead of\n              defining imperative workflows to materialize your assets, you just describe the\n              conditions under which they should be materialized.{' '}\n              <a\n                href=\"https://docs.dagster.io/concepts/assets/asset-auto-execution\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Learn more about auto-materialization here\n              </a>\n              .\n            </>\n          }\n        />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  CursorPaginationControls,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/Filters';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n  });\n\n  const {state: statusState} = statusFilter;\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n    const backfillHealths = daemonHealths\n      .filter((daemon) => daemon.daemonType === 'BACKFILL')\n      .map((daemon) => daemon.required && daemon.healthy);\n    const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n\n    return (\n      <div>\n        {isBackfillHealthy ? null : (\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <DaemonNotRunningAlertBody />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 12, horizontal: 20}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {content()}\n    </>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  ButtonLink,\n  Colors,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {useEffect, useReducer} from 'react';\nimport {Link, useHistory, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {TargetPartitionsDisplay} from './TargetPartitionsDisplay';\nimport {\n  BackfillPartitionsForAssetKeyQuery,\n  BackfillPartitionsForAssetKeyQueryVariables,\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n} from './types/BackfillPage.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {asAssetKeyInput} from '../../assets/asInput';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {AssetViewParams} from '../../assets/types';\nimport {AssetKey, BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const onShowAssetDetails = async (assetKey: AssetKey, isPartitioned: boolean) => {\n      let params: AssetViewParams = {};\n\n      if (isPartitioned) {\n        const resp = await client.query<\n          BackfillPartitionsForAssetKeyQuery,\n          BackfillPartitionsForAssetKeyQueryVariables\n        >({\n          query: BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY,\n          variables: {backfillId, assetKey: asAssetKeyInput(assetKey)},\n        });\n        const data =\n          resp.data.partitionBackfillOrError.__typename === 'PartitionBackfill'\n            ? resp.data.partitionBackfillOrError.partitionsTargetedForAssetKey\n            : null;\n\n        if (data && data.ranges?.length) {\n          params = {default_range: data.ranges.map((r) => `[${r.start}...${r.end}]`).join(',')};\n        }\n      }\n      return history.push(assetDetailsPathForKey(assetKey, params));\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <TargetPartitionsDisplay\n                targetPartitionCount={backfill.numPartitions || 0}\n                targetPartitions={backfill.assetBackfillData?.rootTargetedPartitions}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <ButtonLink\n                          onClick={() =>\n                            onShowAssetDetails(\n                              asset.assetKey,\n                              asset.__typename === 'AssetPartitionsStatusCounts',\n                            )\n                          }\n                        >\n                          {asset.assetKey.path.join('/')}\n                        </ButtonLink>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.backgroundLight(),\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.accentGreen()}} />\n      <div style={{background: Colors.accentRed()}} />\n      <div style={{background: Colors.accentBlue()}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.textLight()};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = useReducer((s: number, _: any) => s + 1, 0);\n  useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootTargetedPartitions {\n        partitionKeys\n        ranges {\n          start\n          end\n        }\n      }\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nexport const BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY = gql`\n  query BackfillPartitionsForAssetKey($backfillId: String!, $assetKey: AssetKeyInput!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionsTargetedForAssetKey(assetKey: $assetKey) {\n          partitionKeys\n          ranges {\n            start\n            end\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n} from './types/OverviewSchedules.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewSchedules = () => {\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo, useState} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {OverviewSensorsQuery, OverviewSensorsQueryVariables} from './types/OverviewSensors.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {useStaticSetFilter} from '../ui/Filters/useStaticSetFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {SENSOR_TYPE_META} from '../workspace/VirtualizedSensorRow';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nfunction toSetFilterValue(type: SensorType) {\n  const label = SENSOR_TYPE_META[type].name;\n  return {\n    label,\n    value: {type, label},\n    match: [label],\n  };\n}\n\nconst SENSOR_TYPE_TO_FILTER: Partial<Record<SensorType, ReturnType<typeof toSetFilterValue>>> = {\n  [SensorType.ASSET]: toSetFilterValue(SensorType.ASSET),\n  [SensorType.AUTO_MATERIALIZE]: toSetFilterValue(SensorType.AUTO_MATERIALIZE),\n  [SensorType.FRESHNESS_POLICY]: toSetFilterValue(SensorType.FRESHNESS_POLICY),\n  [SensorType.MULTI_ASSET]: toSetFilterValue(SensorType.MULTI_ASSET),\n  [SensorType.RUN_STATUS]: toSetFilterValue(SensorType.RUN_STATUS),\n  [SensorType.STANDARD]: toSetFilterValue(SensorType.STANDARD),\n};\nconst ALL_SENSOR_TYPE_FILTERS = Object.values(SENSOR_TYPE_TO_FILTER);\n\nexport const OverviewSensors = () => {\n  const {allRepos, visibleRepos, loading: workspaceLoading} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const [sensorTypes, setSensorTypes] = useState<Set<SensorType>>(() => new Set());\n\n  const sensorTypeFilter = useStaticSetFilter({\n    name: 'Sensor type',\n    allValues: ALL_SENSOR_TYPE_FILTERS,\n    icon: 'sensors',\n    getStringValue: (value) => value.label,\n    state: useMemo(() => {\n      return new Set(Array.from(sensorTypes).map((type) => SENSOR_TYPE_TO_FILTER[type]!.value));\n    }, [sensorTypes]),\n\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setSensorTypes(new Set(Array.from(state).map((value) => value.type)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n    [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, sensorType}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (sensorTypes.size && !sensorTypes.has(sensorType)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, runningState, sensorTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Tooltip\n            content=\"You do not have permission to start or stop these schedules\"\n            canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n            placement=\"top-end\"\n            useDisabledButtonTooltipFix\n          >\n            <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n          </Tooltip>\n        </Box>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorType: SensorType; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n"],"names":["InstanceAutomaterializationEvaluationHistoryTable","param","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","useQueryPersistedState","queryKey","decode","useCallback","statuses","Set","JSON","parse","InstigationTickStatus","STARTED","SUCCESS","FAILURE","SKIPPED","encode","raw","stringify","Array","from","setStatuses","useCursorPaginatedQuery","query","ASSET_DAEMON_TICKS_QUERY","variables","useMemo","nextCursorForResult","data","ticks","autoMaterializeTicks","length","PAGE_SIZE","id","getResultArray","pageSize","paginationProps","useQueryRefreshAtInterval","hasPrevCursor","useEffect","start","timestamp","end","endTimestamp","undefined","jsx_runtime","jsx","AutomaterializationEvaluationHistoryTable","loading","GlobalAutomaterializationContent","automaterialize","useAutomaterializeDaemonStatus","confirm","useConfirmation","tmp","useUnscopedPermissions","permissions","canToggleAutoMaterialize","useState","isPaused","setIsPaused","timeRange","getVariables","now","Date","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","useLazyQuery","fetch","refresh","_async_to_generator","_","_state","sent","useRefreshAtInterval","enabled","intervalMs","leading","selectedTick","view","cursor","tableView","previousData","allTicks","map","tick","index","nextTick","isStuckStartedTick","copy","_object_spread","status","concat","onHoverTick","jsxs","Fragment","Box","padding","vertical","horizontal","flex","direction","gap","Alert","intent","title","description","a","href","target","rel","Table","tbody","tr","td","Spinner","purpose","Checkbox","format","checked","paused","disabled","onChange","e","setPaused","border","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","isOpen","close","AutomaterializeRunHistoryTable","justifyContent","alignItems","div","style","color","Colors","labelForBackfillStatus","key","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","backfillStatusValues","Object","keys","label","value","match","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","statusFilter","useStaticSetFilter","name","icon","allValues","allowMultipleSelections","closeOnSelect","renderLabel","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","getStringValue","state","useFilters","filters","button","activeFiltersJsx","BACKFILLS_QUERY","statusState","size","result","partitionBackfillsOrError","__typename","results","refreshState","FIFTEEN_SECONDS","QueryRefreshCountdown","content","PythonErrorInfo","error","NonIdealState","backfillHealths","daemonHealths","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","required","healthy","isBackfillHealthy","every","x","DaemonNotRunningAlertBody","BackfillTable","backfills","slice","refetch","margin","top","CursorPaginationControls","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","client","useApolloClient","history","useHistory","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","includes","Page","PageHeader","Heading","Link","to","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","getRunsUrl","token","push","RunStatus","QUEUED","STARTING","NOT_STARTED","runsPathWithFilters","onShowAssetDetails","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_23__","assetKey","isPartitioned","params","resp","BACKFILL_PARTITIONS_FOR_ASSET_KEY_QUERY","asAssetKeyInput","partitionsTargetedForAssetKey","ranges","default_range","r","join","assetDetailsPathForKey","wrap","Detail","detail","Timestamp","ms","Number","timeFormat","showSeconds","showTimezone","Duration","TargetPartitionsDisplay","targetPartitionCount","numPartitions","targetPartitions","assetBackfillData","rootTargetedPartitions","BackfillStatusTagForPage","thead","th","width","assetBackfillStatuses","asset","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","tokenForAssetKey","ButtonLink","onClick","path","StatusBar","Tag","minWidth","Label","borderRadius","backgroundColor","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","styled","withConfig","useReducer","s","rerender","intervalId","setInterval","clearInterval","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","minutes","Math","floor","hours","days","trim","OverviewScheduleTable","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","parentRef","React","allKeys","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggle","onToggleAll","flattened","flat","forEach","schedules","type","scheduleCount","repoKey","schedule","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","VirtualizedScheduleHeader","checkbox","Container","ref","Inner","$totalHeight","RepoRow","expanded","showLocation","has","rightElement","Tooltip","placement","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","scheduleState","showCheckboxColumn","onToggleChecked","OverviewSchedules","useContext","WorkspaceContext","allRepos","visibleRepos","repoCount","defaults","search","searchValue","setSearchValue","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","queryResultOverview","OVERVIEW_SCHEDULES_QUERY","fetchPolicy","notifyOnNetworkStatusChange","repoBuckets","visibleKeys","visibleRepoKeys","buildBuckets","filteredBuckets","_param","rest","_object_spread_props","runningState","sanitizedSearch","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","showSearchSpinner","workspaceLoading","filterButton","TextInput","SearchInputSpinner","tooltipContent","placeholder","canShow","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","SchedulerInfo","paddingTop","anyReposHidden","CheckAllBox","totalCount","strong","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","buckets","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","repositories","Symbol","iterator","repo","buildRepoAddress","scheduleNames","err","return","sortRepoBuckets","BASIC_INSTIGATION_STATE_FRAGMENT","_obj","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","sensorState","toSetFilterValue","SENSOR_TYPE_META","SENSOR_TYPE_TO_FILTER","_define_property","SensorType","ASSET","AUTO_MATERIALIZE","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","ALL_SENSOR_TYPE_FILTERS","values","OverviewSensors","sensorTypes","setSensorTypes","sensorTypeFilter","onStateChanged","OVERVIEW_SENSORS_QUERY","sensorType","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","grow","SensorBulkActionMenu","SensorInfo","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_1__","sort","b","aString","bString","localeCompare","option","repository","repositoryLocation","useDelayedState","delayMsec","ready","setReady","timer","setTimeout","clearTimeout","props"],"sourceRoot":""}
{"version":3,"file":"static/chunks/704.5c001df0420b48e9.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConcurrency.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Heading,\n  Icon,\n  Menu,\n  MenuItem,\n  MetadataTableWIP,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Popover,\n  Spinner,\n  StyledRawCodeMirror,\n  Subheading,\n  Table,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  ConcurrencyKeyDetailsQuery,\n  ConcurrencyKeyDetailsQueryVariables,\n  ConcurrencyLimitFragment,\n  ConcurrencyStepFragment,\n  DeleteConcurrencyLimitMutation,\n  DeleteConcurrencyLimitMutationVariables,\n  FreeConcurrencySlotsMutation,\n  FreeConcurrencySlotsMutationVariables,\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  RunQueueConfigFragment,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n} from './types/InstanceConcurrency.types';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  QueryRefreshState,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {failedStatuses} from '../runs/RunStatuses';\nimport {titleForRun} from '../runs/RunUtils';\nimport {TimeElapsed} from '../runs/TimeElapsed';\n\nconst DEFAULT_MIN_VALUE = 1;\nconst DEFAULT_MAX_VALUE = 1000;\n\nexport const InstanceConcurrencyPageContent = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Concurrency');\n\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  return (\n    <>\n      {data ? (\n        <>\n          <Box margin={{bottom: 64}}>\n            <RunConcurrencyContent\n              refreshState={refreshState}\n              hasRunQueue={!!data?.instance.runQueuingSupported}\n              runQueueConfig={data?.instance.runQueueConfig}\n            />\n          </Box>\n          <ConcurrencyLimits\n            instanceConfig={data.instance.info}\n            limits={data.instance.concurrencyLimits}\n            hasSupport={data.instance.supportsConcurrencyLimits}\n            refetch={queryResult.refetch}\n            minValue={data.instance.minConcurrencyLimitValue}\n            maxValue={data.instance.maxConcurrencyLimitValue}\n          />\n        </>\n      ) : (\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      )}\n    </>\n  );\n});\n\nexport const InstanceConcurrencyPage = () => {\n  const {pageTitle} = React.useContext(InstancePageContext);\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" />}\n      />\n      <InstanceConcurrencyPageContent />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nexport const RunConcurrencyContent = ({\n  hasRunQueue,\n  runQueueConfig,\n  onEdit,\n  refreshState,\n}: {\n  hasRunQueue: boolean;\n  runQueueConfig: RunQueueConfigFragment | null | undefined;\n  refreshState?: QueryRefreshState;\n  onEdit?: () => void;\n}) => {\n  if (!hasRunQueue) {\n    return (\n      <>\n        <Box\n          padding={{vertical: 16, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n        >\n          <Subheading>Run concurrency</Subheading>\n          {refreshState ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n        </Box>\n        <div>\n          Run concurrency is not supported with this run coordinator. To enable run concurrency\n          limits, configure your instance to use the <Mono>QueuedRunCoordinator</Mono> in your{' '}\n          <Mono>dagster.yaml</Mono>. See the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://docs.dagster.io/deployment/dagster-instance#queuedruncoordinator\"\n          >\n            QueuedRunCoordinator documentation\n          </a>{' '}\n          for more information.\n        </div>\n      </>\n    );\n  }\n\n  const infoContent = (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      Run concurrency can be set in your run queue settings. See the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        href=\"https://docs.dagster.io/guides/limiting-concurrency-in-data-pipelines#configuring-run-level-concurrency\"\n      >\n        run concurrency documentation\n      </a>{' '}\n      for more information.\n    </Box>\n  );\n\n  const settings_content = runQueueConfig ? (\n    <MetadataTableWIP>\n      <tbody>\n        <tr>\n          <td>Max concurrent runs:</td>\n          <td>{runQueueConfig.maxConcurrentRuns}</td>\n        </tr>\n        <tr>\n          <td>Tag concurrency limits:</td>\n          <td>\n            {runQueueConfig.tagConcurrencyLimitsYaml ? (\n              <StyledRawCodeMirror\n                value={runQueueConfig.tagConcurrencyLimitsYaml}\n                options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n              />\n            ) : (\n              '-'\n            )}\n          </td>\n        </tr>\n      </tbody>\n    </MetadataTableWIP>\n  ) : null;\n\n  return (\n    <>\n      <RunConcurrencyLimitHeader onEdit={onEdit} refreshState={refreshState} />\n      {infoContent}\n      {settings_content}\n    </>\n  );\n};\n\nconst RunConcurrencyLimitHeader = ({\n  onEdit,\n  refreshState,\n}: {\n  onEdit?: () => void;\n  refreshState?: QueryRefreshState;\n}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"bottom\"\n  >\n    <Subheading>Run concurrency</Subheading>\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      {refreshState ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n      {onEdit ? (\n        <Button icon={<Icon name=\"edit\" />} onClick={() => onEdit()}>\n          Edit configuration\n        </Button>\n      ) : null}\n    </Box>\n  </Box>\n);\n\nexport const ConcurrencyLimits = ({\n  instanceConfig,\n  hasSupport,\n  limits,\n  refetch,\n  minValue,\n  maxValue,\n}: {\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n  instanceConfig?: string | null;\n  hasSupport?: boolean;\n  maxValue?: number;\n  minValue?: number;\n}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onConcurrencyStepsDialogClose = React.useCallback(() => {\n    setSelectedKey(undefined);\n  }, [setSelectedKey]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const sortedLimits = React.useMemo(() => {\n    return [...limits].sort((a, b) => COMMON_COLLATOR.compare(a.concurrencyKey, b.concurrencyKey));\n  }, [limits]);\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  if (!hasSupport && instanceConfig && instanceConfig.includes('SqliteEventLogStorage')) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not support global concurrency limits. You will need to ' +\n              'configure a different storage implementation (e.g. Postgres/MySQL) to use this ' +\n              'feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  } else if (hasSupport === false) {\n    return (\n      <>\n        <ConcurrencyLimitHeader />\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency support\"\n            description={\n              'This instance does not currently support global concurrency limits. You may need to ' +\n              'run `dagster instance migrate` to add the necessary tables to your dagster storage ' +\n              'to support this feature.'\n            }\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <ConcurrencyLimitHeader onAdd={onAdd} />\n      {limits.length === 0 ? (\n        <Box margin={24}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        </Box>\n      ) : (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '260px'}}>Concurrency key</th>\n              <th style={{width: '20%'}}>Total slots</th>\n              <th style={{width: '20%'}}>Assigned steps</th>\n              <th style={{width: '20%'}}>Pending steps</th>\n              <th style={{width: '20%'}}>All steps</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedLimits.map((limit) => (\n              <tr key={limit.concurrencyKey}>\n                <td>{limit.concurrencyKey}</td>\n                <td>{limit.slotCount}</td>\n                <td>{limit.pendingSteps.filter((x) => !!x.assignedTimestamp).length}</td>\n                <td>{limit.pendingSteps.filter((x) => !x.assignedTimestamp).length}</td>\n                <td>\n                  <span style={{marginRight: 16}}>{limit.pendingSteps.length}</span>\n                  <Tag intent=\"primary\" interactive>\n                    <ButtonLink\n                      onClick={() => {\n                        setSelectedKey(limit.concurrencyKey);\n                      }}\n                    >\n                      View all\n                    </ButtonLink>\n                  </Tag>\n                </td>\n                <td>\n                  <ConcurrencyLimitActionMenu\n                    concurrencyKey={limit.concurrencyKey}\n                    onEdit={onEdit}\n                    onDelete={onDelete}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n        minValue={minValue ?? DEFAULT_MIN_VALUE}\n        maxValue={maxValue ?? DEFAULT_MAX_VALUE}\n      />\n      <ConcurrencyStepsDialog\n        title={\n          <span>\n            Concurrency steps for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onConcurrencyStepsDialogClose}\n        concurrencyKey={selectedKey}\n        onUpdate={refetch}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitHeader = ({onAdd}: {onAdd?: () => void}) => (\n  <Box\n    flex={{justifyContent: 'space-between', alignItems: 'center'}}\n    padding={{vertical: 16, horizontal: 24}}\n    border=\"top-and-bottom\"\n  >\n    <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n      <Subheading>Global op/asset concurrency</Subheading>\n      <Tag>Experimental</Tag>\n    </Box>\n    {onAdd ? (\n      <Button icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n        Add concurrency limit\n      </Button>\n    ) : null}\n  </Box>\n);\n\nconst ConcurrencyLimitActionMenu = ({\n  concurrencyKey,\n  onDelete,\n  onEdit,\n}: {\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (\n  concurrencyLimit?: string,\n  minLimitValue: number = DEFAULT_MIN_VALUE,\n  maxLimitValue: number = DEFAULT_MAX_VALUE,\n) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value >= minLimitValue && value <= maxLimitValue;\n};\n\nconst AddConcurrencyLimitDialog = ({\n  open,\n  onClose,\n  onComplete,\n  maxValue,\n  minValue,\n}: {\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  maxValue: number;\n  minValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Concurrency limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={\n            !isValidLimit(limitInput.trim(), minValue, maxValue) || !keyInput || isSubmitting\n          }\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n  minValue,\n  maxValue,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n  minValue: number;\n  maxValue: number;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>\n          Concurrency limit ({minValue}-{maxValue}):\n        </Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder={`${minValue} - ${maxValue}`}\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button\n            intent=\"primary\"\n            onClick={save}\n            disabled={!isValidLimit(limitInput.trim(), minValue, maxValue)}\n          >\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog = ({\n  concurrencyKey,\n  open,\n  onClose,\n  onComplete,\n}: {\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [deleteConcurrencyLimit] = useMutation<\n    DeleteConcurrencyLimitMutation,\n    DeleteConcurrencyLimitMutationVariables\n  >(DELETE_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await deleteConcurrencyLimit({variables: {concurrencyKey}});\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyActionMenu = ({\n  pendingStep,\n  onUpdate,\n}: {\n  pendingStep: ConcurrencyStepFragment;\n  onUpdate: () => void;\n}) => {\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsMutation,\n    FreeConcurrencySlotsMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_MUTATION);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem\n            key=\"free-concurrency-slots-step\"\n            icon=\"status\"\n            text=\"Free concurrency slot for step\"\n            onClick={async () => {\n              const resp = await freeSlots({\n                variables: {runId: pendingStep.runId, stepKey: pendingStep.stepKey},\n              });\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slot',\n                });\n              }\n            }}\n          />\n          <MenuItem\n            key=\"free-concurrency-slots-run\"\n            icon=\"status\"\n            text=\"Free all concurrency slots for run\"\n            onClick={async () => {\n              await showSharedToaster({message: 'Freeing concurrency slots...'});\n              const resp = await freeSlots({variables: {runId: pendingStep.runId}});\n              if (resp.data?.freeConcurrencySlots) {\n                onUpdate();\n                await showSharedToaster({\n                  intent: 'success',\n                  icon: 'copy_to_clipboard_done',\n                  message: 'Freed concurrency slots',\n                });\n              }\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button rightIcon={<Icon name=\"expand_more\" />}>Actions</Button>\n    </Popover>\n  );\n};\n\nconst ConcurrencyStepsDialog = ({\n  concurrencyKey,\n  onClose,\n  title,\n  onUpdate,\n}: {\n  concurrencyKey?: string;\n  title: string | React.ReactNode;\n  onClose: () => void;\n  onUpdate: () => void;\n}) => {\n  const queryResult = useQuery<ConcurrencyKeyDetailsQuery, ConcurrencyKeyDetailsQueryVariables>(\n    CONCURRENCY_KEY_DETAILS_QUERY,\n    {\n      variables: {\n        concurrencyKey: concurrencyKey || '',\n      },\n      skip: !concurrencyKey,\n    },\n  );\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const refetch = React.useCallback(() => {\n    queryResult.refetch();\n    onUpdate();\n  }, [queryResult, onUpdate]);\n\n  return (\n    <Dialog\n      isOpen={!!concurrencyKey}\n      title={title}\n      onClose={onClose}\n      style={{\n        minWidth: '400px',\n        maxWidth: '1000px',\n        width: '90vw',\n        maxHeight: '90vh',\n      }}\n    >\n      <Box padding={{vertical: 16}} flex={{grow: 1}} style={{overflowY: 'auto'}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : (\n          <PendingStepsTable keyInfo={data.instance.concurrencyLimit} refresh={refetch} />\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst PendingStepsTable = ({\n  keyInfo,\n  refresh,\n}: {\n  keyInfo: ConcurrencyLimitFragment;\n  refresh: () => void;\n}) => {\n  const runIds = [...new Set(keyInfo.pendingSteps.map((step) => step.runId))];\n  const queryResult = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        filter: {runIds},\n      },\n      skip: !keyInfo.pendingSteps.length,\n    },\n  );\n  const statusByRunId: {[id: string]: RunStatus} = {};\n  const runs =\n    queryResult.data?.pipelineRunsOrError.__typename === 'Runs'\n      ? queryResult.data.pipelineRunsOrError.results\n      : [];\n  runs.forEach((run) => {\n    statusByRunId[run.id] = run.status;\n  });\n\n  const steps = [...keyInfo.pendingSteps];\n  steps.sort((a, b) => {\n    if (a.priority && b.priority && a.priority !== b.priority) {\n      return a.priority - b.priority;\n    }\n    return a.enqueuedTimestamp - b.enqueuedTimestamp;\n  });\n  const assignedSteps = steps.filter((step) => !!step.assignedTimestamp);\n  const pendingSteps = steps.filter((step) => !step.assignedTimestamp);\n\n  const tableHeader = (\n    <thead>\n      <tr>\n        <th>Run ID</th>\n        <th>Step key</th>\n        <th>Assigned</th>\n        <th>Queued</th>\n        <th>\n          <Box flex={{alignItems: 'center', direction: 'row', gap: 4}}>\n            Priority\n            <Tooltip\n              placement=\"top\"\n              content=\"Priority can be set on each op/asset using the 'dagster/priority' tag. Higher priority steps will be assigned slots first.\"\n            >\n              <Icon name=\"info\" color={Colors.accentGray()} />\n            </Tooltip>\n          </Box>\n        </th>\n        <th></th>\n      </tr>\n    </thead>\n  );\n\n  if (!steps.length) {\n    return (\n      <Table>\n        {tableHeader}\n        <tbody>\n          <tr>\n            <td colSpan={6}>\n              <Box\n                flex={{alignItems: 'center', justifyContent: 'center'}}\n                style={{color: Colors.textLight()}}\n                padding={16}\n              >\n                There are no active or pending steps for this concurrency key.\n              </Box>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <Table>\n      {tableHeader}\n      <tbody style={{backgroundColor: Colors.backgroundYellow()}}>\n        {assignedSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n      <tbody>\n        {pendingSteps.map((step) => (\n          <PendingStepRow\n            key={step.runId + step.stepKey}\n            step={step}\n            statusByRunId={statusByRunId}\n            onUpdate={refresh}\n          />\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst PendingStepRow = ({\n  step,\n  statusByRunId,\n  onUpdate,\n}: {\n  step: ConcurrencyStepFragment;\n  statusByRunId: {[id: string]: RunStatus};\n  onUpdate: () => void;\n}) => {\n  const runStatus = statusByRunId[step.runId];\n  return (\n    <tr>\n      <td>\n        {runStatus ? (\n          <Link to={`/runs/${step.runId}`}>\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <RunStatusDot status={runStatus} size={10} />\n              <Mono>{titleForRun({id: step.runId})}</Mono>\n              {failedStatuses.has(runStatus) ? (\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Slots for canceled / failed runs can automatically be freed by configuring a run monitoring setting.\"\n                >\n                  <Icon name=\"info\" color={Colors.accentGray()} />\n                </Tooltip>\n              ) : null}\n            </Box>\n          </Link>\n        ) : (\n          <Mono>{titleForRun({id: step.runId})}</Mono>\n        )}\n      </td>\n      <td>\n        <Mono>{step.stepKey}</Mono>\n      </td>\n      <td>\n        {step.assignedTimestamp ? (\n          <TimeElapsed startUnix={step.assignedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>\n        {step.enqueuedTimestamp ? (\n          <TimeElapsed startUnix={step.enqueuedTimestamp} endUnix={null} />\n        ) : (\n          '-'\n        )}\n      </td>\n      <td>{step.priority}</td>\n      <td>\n        <ConcurrencyActionMenu pendingStep={step} onUpdate={onUpdate} />\n      </td>\n    </tr>\n  );\n};\n\nexport const CONCURRENCY_STEP_FRAGMENT = gql`\n  fragment ConcurrencyStepFragment on PendingConcurrencyStep {\n    runId\n    stepKey\n    enqueuedTimestamp\n    assignedTimestamp\n    priority\n  }\n`;\nexport const CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    claimedSlots {\n      runId\n      stepKey\n    }\n    pendingSteps {\n      ...ConcurrencyStepFragment\n    }\n  }\n  ${CONCURRENCY_STEP_FRAGMENT}\n`;\nexport const RUN_QUEUE_CONFIG_FRAGMENT = gql`\n  fragment RunQueueConfigFragment on RunQueueConfig {\n    maxConcurrentRuns\n    tagConcurrencyLimitsYaml\n  }\n`;\n\nexport const INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      info\n      supportsConcurrencyLimits\n      runQueuingSupported\n      runQueueConfig {\n        ...RunQueueConfigFragment\n      }\n      minConcurrencyLimitValue\n      maxConcurrencyLimitValue\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n  ${RUN_QUEUE_CONFIG_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nconst DELETE_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation DeleteConcurrencyLimit($concurrencyKey: String!) {\n    deleteConcurrencyLimit(concurrencyKey: $concurrencyKey)\n  }\n`;\n\nexport const FREE_CONCURRENCY_SLOTS_MUTATION = gql`\n  mutation FreeConcurrencySlots($runId: String!, $stepKey: String) {\n    freeConcurrencySlots(runId: $runId, stepKey: $stepKey)\n  }\n`;\n\nconst CONCURRENCY_KEY_DETAILS_QUERY = gql`\n  query ConcurrencyKeyDetailsQuery($concurrencyKey: String!) {\n    instance {\n      id\n      concurrencyLimit(concurrencyKey: $concurrencyKey) {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n"],"names":["InstanceConcurrencyPageContent","React","useTrackPageView","useDocumentTitle","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","Fragment","jsxs","Box","margin","bottom","RunConcurrencyContent","hasRunQueue","instance","runQueuingSupported","runQueueConfig","ConcurrencyLimits","instanceConfig","info","limits","concurrencyLimits","hasSupport","supportsConcurrencyLimits","refetch","minValue","minConcurrencyLimitValue","maxValue","maxConcurrencyLimitValue","padding","vertical","Spinner","purpose","InstanceConcurrencyPage","pageTitle","InstancePageContext","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","__webpack_exports__","param","onEdit","horizontal","border","flex","direction","alignItems","justifyContent","Subheading","QueryRefreshCountdown","div","Mono","a","target","rel","href","infoContent","settings_content","MetadataTableWIP","tbody","tr","td","maxConcurrentRuns","tagConcurrencyLimitsYaml","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","RunConcurrencyLimitHeader","gap","Button","icon","Icon","name","onClick","action","setAction","undefined","selectedKey","setSelectedKey","onConcurrencyStepsDialogClose","limitsByKey","Object","fromEntries","map","concurrencyKey","slotCount","sortedLimits","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_25__","_","sort","b","COMMON_COLLATOR","compare","onAdd","actionType","concurrencyLimit","onDelete","includes","ConcurrencyLimitHeader","NonIdealState","description","length","ButtonLink","Table","thead","th","style","width","limit","pendingSteps","filter","x","assignedTimestamp","span","marginRight","Tag","intent","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyStepsDialog","strong","onUpdate","Popover","content","Menu","MenuItem","text","position","isValidLimit","minLimitValue","maxLimitValue","parseInt","isNaN","String","trim","isSubmitting","setIsSubmitting","limitInput","setLimitInput","keyInput","setKeyInput","setConcurrencyLimit","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","save","_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_33__","variables","_state","sent","Dialog","isOpen","DialogBody","TextInput","onChange","e","placeholder","concat","DialogFooter","disabled","deleteConcurrencyLimit","DELETE_CONCURRENCY_LIMIT_MUTATION","ConcurrencyActionMenu","pendingStep","freeSlots","FREE_CONCURRENCY_SLOTS_MUTATION","resp","runId","stepKey","freeConcurrencySlots","showSharedToaster","message","rightIcon","CONCURRENCY_KEY_DETAILS_QUERY","skip","minWidth","maxWidth","maxHeight","grow","overflowY","PendingStepsTable","keyInfo","refresh","runIds","Set","step","RUNS_FOR_CONCURRENCY_KEY_QUERY","statusByRunId","runs","pipelineRunsOrError","__typename","results","forEach","run","id","status","steps","priority","enqueuedTimestamp","assignedSteps","tableHeader","Tooltip","placement","color","Colors","backgroundColor","PendingStepRow","colSpan","runStatus","Link","to","RunStatusDot","size","titleForRun","failedStatuses","has","TimeElapsed","startUnix","endUnix","CONCURRENCY_STEP_FRAGMENT","gql","CONCURRENCY_LIMIT_FRAGMENT","RUN_QUEUE_CONFIG_FRAGMENT","InstanceWarningIcon","memo","daemons","useContext","DeploymentStatusContext","jsx_runtime","WarningTooltip","modifiers","offset","enabled","WorkspaceStatus","codeLocations","type","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink"],"sourceRoot":""}